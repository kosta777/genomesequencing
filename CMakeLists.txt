cmake_minimum_required(VERSION 3.12.0)
include("cmake/warning_flags.cmake")
option(HAS_CLANG_TIDY "use clang-tidy" OFF)
include("cmake/clang_tidy.cmake")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CC_COMPILER gcc)
set(CMAKE_CXX_COMPILER g++)
set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Og -Wall -pedantic -Wextra -g -ggdb --std=c++17 -mavx -march=native")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -Ofast -march=native -Wall -std=c++17 -flto -mavx -mtune=native -ffast-math -ftree-loop-if-convert") #-fopt-info #-fopt-info-vec-all
SET(CMAKE_AR "gcc-ar")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto")
SET(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> qcs <TARGET> <LINK_FLAGS> <OBJECTS>")
SET(CMAKE_CXX_ARCHIVE_FINISH   true)

project(GENOMESEQ)
include("cmake/GetEigen.cmake")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
set(TARGET_NAME parseqal)
option(DEBUG "debug mode" OFF)
option(VERBOSE "verbose output" OFF)
option(USEMPI "Use MPI" OFF)
option(USEOMP "Use OpenMP" OFF)
option(MTSIMD "Multithread SIMD" OFF)
set(CMAKE_BUILD_TYPE "Release")

if (DEBUG)
  set(CMAKE_BUILD_TYPE "Debug")
  set(TARGET_NAME parseqal_debug)
  add_definitions(-DDEBUG)
endif ()

if (VERBOSE)
  add_definitions(-DVERBOSE)
endif ()


if (USEMPI)
  add_definitions(-DUSEMPI)
  find_package(MPI REQUIRED)
  message(STATUS "Using MPI_INCLUDE_PATH: ${MPI_INCLUDE_PATH}")
  message(STATUS "Using MPI_CXX_LIBRARIES: ${MPI_CXX_LIBRARIES}")
  message(STATUS "Using MPI_CXX_COMPILER: ${MPI_CXX_COMPILER}")
  include_directories(SYSTEM ${MPI_INCLUDE_PATH})
  set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
endif ()

if (USEOMP)
  add_definitions(-DUSEOMP)
  find_package(OpenMP)
  include(ProcessorCount)
  ProcessorCount(OMP_NUM_THREADS)
  add_definitions(-DOMP_NUM_THREADS=${OMP_NUM_THREADS})
  message(STATUS "Using OMP Version: ${OpenMP_CXX_VERSION}")
  message(STATUS "OMP Num Threads: ${OMP_NUM_THREADS}")
  include_directories(SYSTEM ${OpenMP_CXX_INCLUDE_DIRS})
endif()

if (MTSIMD)
  add_definitions(-DMTSIMD)
endif ()


aux_source_directory(${PROJECT_SOURCE_DIR}/src/aligner ALIGNER_SRCS)
add_library(libaligner ${ALIGNER_SRCS})
target_link_libraries(libaligner PUBLIC Eigen)
include_directories(${PROJECT_SOURCE_DIR}/src/aligner)
if (USEOMP)
  target_link_libraries(libaligner PUBLIC OpenMP::OpenMP_CXX)
endif()

add_executable(${TARGET_NAME} src/main.cpp)
target_link_libraries(${TARGET_NAME} PUBLIC Eigen)
target_link_libraries(${TARGET_NAME} PRIVATE libaligner)
target_link_libraries(${TARGET_NAME} PRIVATE warning_flags)
#target_compile_definitions(${TARGET_NAME} PUBLIC -D_USE_MATH_DEFINES)

add_executable(bwt_fm src/bwt_fm.cpp)
target_link_libraries(bwt_fm PUBLIC Eigen)
target_link_libraries(bwt_fm PRIVATE libaligner)

add_executable(sw_solve_small src/sw_solve_small.cpp)
target_link_libraries(sw_solve_small PRIVATE libaligner)

add_executable(sw_solve_big src/sw_solve_big.cpp)
target_link_libraries(sw_solve_big PRIVATE libaligner)

add_executable(mpi_sw_solve_small src/mpi_sw_solve_small.cpp)
target_link_libraries(mpi_sw_solve_small PRIVATE libaligner)

add_executable(mpi_sw_solve_uniprot src/mpi_sw_solve_uniprot.cpp)
target_link_libraries(mpi_sw_solve_uniprot PRIVATE libaligner)

add_executable(omp_sw_solve_small src/omp_sw_solve_small.cpp)
target_link_libraries(omp_sw_solve_small PRIVATE libaligner)
target_link_libraries(omp_sw_solve_small PUBLIC Eigen)
if (USEOMP)
  target_link_libraries(omp_sw_solve_small PUBLIC OpenMP::OpenMP_CXX)
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

include(cmake/GetGTest.cmake)
aux_source_directory(${PROJECT_SOURCE_DIR}/test TEST_SRCS)
add_executable(tests ${TEST_SRCS})
target_link_libraries(tests PRIVATE libaligner)
target_link_libraries(tests PUBLIC GTest)

if (USEMPI)
  target_link_libraries(${TARGET_NAME} PUBLIC ${MPI_CXX_LIBRARIES})
  target_link_libraries(tests PUBLIC ${MPI_CXX_LIBRARIES})
endif ()

if (USEOMP)
  target_link_libraries(${TARGET_NAME} PUBLIC OpenMP::OpenMP_CXX)
  target_link_libraries(libaligner PUBLIC OpenMP::OpenMP_CXX)
  target_link_libraries(sw_solve_small PUBLIC OpenMP::OpenMP_CXX)
  target_link_libraries(sw_solve_big PUBLIC OpenMP::OpenMP_CXX)
  target_link_libraries(tests PUBLIC OpenMP::OpenMP_CXX)
endif ()

if(CLANG_TIDY_EXE)
  set_target_properties(${TARGET_NAME} PROPERTIES CXX_CLANG_TIDY "${DO_CLANG_TIDY}")
endif()
